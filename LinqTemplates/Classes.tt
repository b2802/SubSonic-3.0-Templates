<#@ template language="C#v3.5" debug="False" hostspecific="True"  #>
<#@ output extension=".cs" #>
<#@ include file="SQLServer.ttinclude" #>
<#
    var tables = LoadTables();
#>
using System;
using System.ComponentModel;
using System.Linq;

namespace <#=Namespace#>
{
    
    
<#  foreach(Table tbl in tables){#>    
    
    /// <summary>
    /// A class which represents the <#=tbl.Name#> table in the <#=DatabaseName#> Database.
    /// This class is queryable through <#=DatabaseName#>DB.<#=tbl.ClassName#> 
    /// </summary>

	public partial class <#=tbl.ClassName#>: INotifyPropertyChanging, INotifyPropertyChanged
	{
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
	    
	    public <#=tbl.ClassName#>(){
	        OnCreated();
	    }
	    
	    #region Properties
	    
<#      foreach(var col in tbl.Columns){
			if (tbl.ClassName == col.CleanName)
			{
				col.CleanName += "X";
			}
#>
        partial void On<#=col.CleanName#>Changing(<#=col.SysType#><#=CheckNullable(col)#> value);
        partial void On<#=col.CleanName#>Changed();
		
		private <#=col.SysType#><#=CheckNullable(col)#> _<#=col.CleanName#>;
		public <#=col.SysType#><#=CheckNullable(col)#> <#=col.CleanName#> { 
		    get{
		        return _<#=col.CleanName#>;
		    } 
		    set{
		        this.On<#=col.CleanName#>Changing(value);
                this.SendPropertyChanging();
                this._<#=col.CleanName#> = value;
                this.SendPropertyChanged("<#=col.CleanName#>");
                this.On<#=col.CleanName#>Changed();
		    }
		}
		
<#      }#>

        #endregion


		#region ' Foreign Keys '
<# 
		Dictionary<string,List<FKTable>> contraints = new Dictionary<string,List<FKTable>>();
            foreach(FKTable fk in tbl.FKTables)
			{
				if (contraints.ContainsKey(fk.ConstraintName)==false)
				{
					List<FKTable> table_list=new List<FKTable>();
					table_list.Add(fk);
					contraints.Add(fk.ConstraintName,table_list);
				}
				else
				{
					List<FKTable> table_list=contraints[fk.ConstraintName];
					table_list.Add(fk);					
				}					
			}
				List<string> fkCreated2 = new List<string>();
			foreach (string contraint in contraints.Keys)
			{
				List<FKTable> table_list=contraints[contraint];
               string propName=table_list[0].OtherQueryable;
               if(fkCreated2.Contains(propName))
               {
                   propName=table_list[0].OtherQueryable+fkCreated2.Count.ToString();
               }
               
               fkCreated2.Add(table_list[0].OtherQueryable);

				#>
		public IQueryable<<#=table_list[0].OtherClass #>> <#=propName #>
		{
			get
			{
				
                var db=new <#=Namespace #>.<#=DatabaseName#>DB();
                return from items in db.<#=table_list[0].OtherQueryable#>
					 where<# 
				for (int i=0;i<table_list.Count;i++)
				{
					FKTable tab=table_list[i];					
					if (i==0){#> items.<#=CleanUp(tab.OtherColumn)#> == <#=CleanUp(tab.ThisColumn) #>
							<# } else {#> && items.<#=CleanUp(tab.OtherColumn)#> == <#=CleanUp(tab.ThisColumn) #>
							<# }#>
<#}#>
select items;
			}
		}
		
<# 
		}

		
#>
#endregion   

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void SendPropertyChanging()
        {
            var handler = PropertyChanging;
            if (handler != null)
               handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

	}
	
<#}#>
}